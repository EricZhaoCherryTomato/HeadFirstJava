OO Basics:
Abstraction
Encapsulation
Polymorphism
Inheritance

OO Principles
Encapsulate what varies
Favor composition over inheritence
Program to interface, not implementation

Strive for loosely coupled designs between objects that interact

Classes should be open for extension but closed for modification.

Depend on abstraction. Do not depend on concrete classes.

OO Patterns
Strategy: defines a family of alogrithms, encapsulates each one
and makes them interchangeable. Strategy lets the algorithm vary
independently from clients that use it.

Observer: defines a one-to-many dependency between objects so that 
when one object chenges state, all its dependents are notified and 
updated automatically.

Decorator: Attach additional responsibilities to an object dynamically.
Decorators provide a flexible atternative to subclassing for extending
functionality.

Abstract Factory: Provide an interface for creating families of related 
or dependent objects without specifying their concerte classes.

Factory Method: Define an interface for creating an object, but let 
subclasses decide which class to instantiate. Factory Method lets a 
class defer instantiation to the subclasses.

Singleton: Ensure a class only has one instance and provide a global
point of access to it.

Command: Encapsulates a request as an object, thereby letting you
parameterize clients with different requests, queue or log request,
and support undoable operations.

Adapter: Converts the interface of class into another interface clients
expect. Lets classes work together that couldn't otherwise because of
incompatible interfaces.





